# -*clang- Python -*-

import os
import platform
import re
import subprocess
import sys

import lit

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'Polli'

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
execute_external = platform.system() != 'Windows'
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.ll', '.cc', '.c']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

polli_obj_root = getattr(config, 'polli_obj_root', None)

# test_exec_root: The root path where tests should be run.
config.test_exec_root = os.path.join(polli_obj_root, 'test')

polli_lib_dir = getattr(config, 'polli_lib_dir', None)
llvm_src_root = getattr(config, 'llvm_src_root', None)
llvm_obj_root = getattr(config, 'llvm_obj_root', None)
llvm_tools_install_dir = getattr(config, 'llvm_tools_install_dir', None)
llvm_install_prefix = getattr(config, 'llvm_install_prefix', None)
llvm_binary_dir = getattr(config, 'llvm_binary_dir', None)

# Next, look in llvm's tools dir
tools_bin_dir = os.path.join(llvm_install_prefix, llvm_tools_install_dir)
tools_lib_dir = os.path.join(llvm_install_prefix, 'lib')

# Tweak the PATH to include the tools dir and the scripts dir.
config.environment['PATH'] = \
    os.path.pathsep.join((tools_bin_dir,
                          config.environment['PATH']))
config.environment['LD_LIBRARY_PATH'] = \
    os.path.pathsep.join((tools_lib_dir,
                          config.environment.get('LD_LIBRARY_PATH','')))
config.environment['LD_LIBRARY_PATH'] = \
    os.path.pathsep.join((polli_lib_dir,
                          config.environment.get('LD_LIBRARY_PATH','')))


def inferClang(config):
    # Determine which clang to use.
    clang = os.getenv('CLANG')

    # If the user set clang in the environment, definitely use that and don't
    # try to validate.
    if clang:
        return clang

    # Otherwise look in the path.
    clang = lit.util.which('clang', config.environment['PATH'])

    if not clang:
        lit_config.fatal("couldn't find 'clang' program, try setting "
                         "CLANG in your environment")

    return clang

config.clang = inferClang(config).replace('\\', '/')
if not lit_config.quiet:
    lit_config.note('using clang: %r' % config.clang)

# Plugins (loadable modules)
# TODO: This should be supplied by Makefile or autoconf.
if sys.platform in ['win32', 'cygwin']:
    has_plugins = (config.enable_shared == 1)
else:
    has_plugins = True

# Note that when substituting %clang_cc1 also fill in the include directory of
# the builtin headers. Those are part of even a freestanding environment, but
# Clang relies on the driver to locate them.
def getClangBuiltinIncludeDir(clang):
    # FIXME: Rather than just getting the version, we should have clang print
    # out its resource dir here in an easy to scrape form.
    cmd = subprocess.Popen([clang, '-print-file-name=include'],
                           stdout=subprocess.PIPE,
                           env=config.environment)
    if not cmd.stdout:
      lit_config.fatal("Couldn't find the include dir for Clang ('%s')" % clang)
    dir = cmd.stdout.read().strip()
    if sys.platform in ['win32'] and execute_external:
        # Don't pass dosish path separator to msys bash.exe.
        dir = dir.replace('\\', '/')
    # Ensure the result is an ascii string, across Python2.5+ - Python3.
    return str(dir.decode('ascii'))

config.substitutions.append( ('%clang_cc1',
                              '%s -cc1 -internal-isystem %s -nostdsysteminc'
                              % (config.clang,
                                 getClangBuiltinIncludeDir(config.clang))) )
config.substitutions.append( ('%clang_cpp', ' ' + config.clang +
                              ' --driver-mode=cpp '))
config.substitutions.append( ('%clang_cl', ' ' + config.clang +
                              ' --driver-mode=cl '))
config.substitutions.append( ('%clangxx', ' ' + config.clang +
                              ' --driver-mode=g++ '))
config.substitutions.append( ('%clang', ' ' + config.clang + ' ') )
config.substitutions.append( ('%pjit', ' -L' + config.polli_lib_dir + ' -lpjit ') )
config.substitutions.append( ('%test_debuginfo', ' ' + config.llvm_src_root + '/utils/test_debuginfo.pl ') )